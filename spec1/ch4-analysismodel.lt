content(type(save_lt_editor('intmod1-ch7-v02.lt'))).
content(generator(app(leadsto_software, 122, [lteditor:1, psprinting:1]))).
content(run([date('Wed Dec  3 15:00:16 2008')])).
end_time(40).
qterm(cwa('_')).
qterm('display(_, show_atoms(observed(agent, _)))').
qterm('display(_, show_atoms(belief(agent, has_level(_,_))))').
qterm('display(_, show_atoms(belief(agent, performed(_))))').
qterm('display(_, show_atoms(belief(agent, basic_eye_dryness(_))))').
qterm('display(_, show_atoms(belief(agent, eye_drying_speed(_))))').
qterm('display(_, show_atoms(belief(agent, eye_dryness_norm(_))))').
qterm('display(_, show_atoms(belief(agent, eye_dryness(_))))').
qterm('display_number_range(belief(agent, eye_dryness(X)), X, \'estimated eye dryness\', \' \')').
qterm('display(_, show_atoms(desire(agent, has_level(_,_))))').
qterm('display(_, show_atoms(belief(agent, has_discrepancy(_,_))))').
sortdef(product, [drugs, alcohol, non_stop_driving]).
sortdef(state, [drug_level, alcohol_level, fatigue]).
interval([], range(0, 40), and(belief(agent, affects(drugs, drug_level)), belief(agent, affects(alcohol, alcohol_level)), belief(agent, affects(non_stop_driving, fatigue)), belief(agent, eye_dryness_norm(0.5)), desire(agent, has_level(fatigue, low)))).
interval([], range(0, 1), belief(agent, has_level(fatigue, low))).
interval([], range(0, 2), belief(agent, eye_dryness(0.1))).
interval([], range(22, 32), observed(agent, consumed(non_stop_driving))).
interval([], range(14, 16), observed(agent, performed(eye_blink))).
interval([], range(27, 29), observed(agent, performed(eye_blink))).
interval([], range(33, 35), observed(agent, performed(eye_blink))).
leadsto([p:product, s:state], and(observed(agent, consumed(p)), belief(agent, affects(p, s))), belief(agent, has_level(s, high)), efgh(0, 0, 1, 3)).
leadsto([p:product, s:state], and(not(observed(agent, consumed(p))), belief(agent, affects(p, s)), belief(agent, has_level(s, low))), belief(agent, has_level(s, low)), efgh(0, 0, 1, 1)).
leadsto([p:product, s:state], and(not(observed(agent, consumed(p))), belief(agent, affects(p, s)), belief(agent, has_level(s, high))), belief(agent, has_level(s, low)), efgh(0, 0, 3, 1)).
leadsto([], belief(agent, has_level(fatigue, high)), and(belief(agent, basic_eye_dryness(0.2)), belief(agent, eye_drying_speed(0.15))), efgh(0, 0, 1, 1)).
leadsto([], belief(agent, has_level(fatigue, low)), and(belief(agent, basic_eye_dryness(0.1)), belief(agent, eye_drying_speed(0.05))), efgh(0, 0, 1, 1)).
leadsto([x:real, y:real], and(belief(agent, eye_dryness(x)), belief(agent, eye_dryness_norm(y)), x>y), belief(agent, performed(eye_blink)), efgh(0, 0, 1, 1)).
leadsto([d:real], and(observed(agent, performed(eye_blink)), belief(agent, basic_eye_dryness(d))), belief(agent, eye_dryness(d)), efgh(0, 0, 1, 1)).
leadsto([s:real, x:real], and(belief(agent, eye_dryness(x)), not(observed(agent, performed(eye_blink))), belief(agent, eye_drying_speed(s))), belief(agent, eye_dryness(x+s* (1-x))), efgh(0, 0, 1, 1)).
leadsto([], and(desire(agent, has_level(fatigue, low)), belief(agent, has_level(fatigue, high))), belief(agent, has_discrepancy(fatigue, high)), efgh(0, 0, 1, 1)).
